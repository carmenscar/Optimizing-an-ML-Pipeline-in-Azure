from train import clean_data
from azureml.data.dataset_factory import TabularDatasetFactory
from azureml.core import Dataset, Workspace, Datastore
import pandas as pd
import os

# Carrega o workspace
ws = Workspace.from_config()

# Carrega o dataset
url = "https://automlsamplenotebookdata.blob.core.windows.net/automl-sample-notebook-data/bankmarketing_train.csv"
ds = TabularDatasetFactory.from_delimited_files(path=url)

# Limpa os dados
x, y = clean_data(ds)

# Combina x e y em um único DataFrame
cleaned_data = pd.concat([x, y], axis=1)

# Salva o DataFrame em um arquivo CSV temporário
temp_csv_path = "temp_cleaned_data.csv"
cleaned_data.to_csv(temp_csv_path, index=False)

# Obtém o datastore padrão do workspace
datastore = ws.get_default_datastore()

# Define o caminho no datastore para salvar o arquivo CSV
datastore_path = "cleaned_data/temp_cleaned_data.csv"

# Salva o arquivo CSV no datastore
datastore.upload_files(
    files=[temp_csv_path],  # Arquivo local temporário
    target_path="cleaned_data",  # Pasta no datastore
    overwrite=True
)

# Remove o arquivo CSV temporário
os.remove(temp_csv_path)

# Cria o dataset a partir do arquivo CSV no datastore
cleaned_ds = TabularDatasetFactory.from_delimited_files(
    path=[(datastore, datastore_path)],  # Caminho no datastore
    separator=',',  # Delimitador CSV
    header=True,    # Primeira linha é o cabeçalho
    infer_column_types=True  # Infere os tipos de coluna automaticamente
)

# Registra o dataset no workspace
cleaned_ds = cleaned_ds.register(
    workspace=ws,
    name="cleaned_bankmarketing_data",
    description="Dados limpos do bank marketing"
)

print("Dataset registrado com sucesso:", cleaned_ds.name)

# Configura o AutoML com os dados limpos
automl_config = AutoMLConfig(
    experiment_timeout_minutes=30,
    task='classification',
    primary_metric='accuracy',
    training_data=cleaned_ds,  # Usa o dataset registrado
    label_column_name='y',     # Coluna target
    n_cross_validations=2,
    compute_target=compute_target
)

# Submete o experimento do AutoML
remote_run = exp.submit(automl_config, show_output=True)
remote_run.wait_for_completion()
